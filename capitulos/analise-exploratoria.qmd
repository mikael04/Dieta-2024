---
---

## Análise exploratória

Para fazer a anotação dos dados, eu utilizei uma planilha do google dividida em abas, uma aba por mês, e isto já vai envolver algum processamento do dado que será feito a seguir. Lembrando dados importantes.

Data inicial: 07/11/2023 Data final: 15/01/2024

### Leitura dos dados

```{r, lendo-dados}
df_2023_nov <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1txp3AiJhJRWTxjZikS4RVI191nxOG_BTkoawITC3hrU/edit?pli=1#gid=1352677891", sheet = "2023-Novembro") 

df_2023_dez <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1txp3AiJhJRWTxjZikS4RVI191nxOG_BTkoawITC3hrU/edit?pli=1#gid=1352677891", sheet = "2023-Dezembro")

df_2024_jan <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1txp3AiJhJRWTxjZikS4RVI191nxOG_BTkoawITC3hrU/edit?pli=1#gid=1352677891", sheet = "2024-Jan")

df_2023_nov |> 
  dplyr::select(1, 14, 15, 16) |> 
  dplyr::slice(1:10) |> 
  gt::gt()

```

Uma rápida observação dos dados nos mostrou alguns problemas de inconsistências nos dados lidos. Inicialmente algumas colunas da tabela de novembro foram lidas com o tipo errado, uma numérica e outra de carácteres foram lidas como listas, pelo formato da tabela também precisei remover uma linha que não estava preenchida, esses problemas foram corirgidos. Além disso padronizei os nomes das colunas e selecionei apenas as colunas que seriam utilizadas. Para exemplificar mostrarei uma parte da tabela de novembro ao ler os dados do google drive, e em seguida como ficou a tabela após padronizar e tratar o nome das colunas e seus tipos.


### Tratamento dos dados

```{r, tratamento-de-dados-1}
df_2023_nov <- df_2023_nov |>
  dplyr::rename(dia = `Tarefa/objetivo`, kcal = `Kcal consumidas`, obs = 16,
                peso = Peso) |> 
  dplyr::mutate(dia = as.integer(dia), kcal = as.character(kcal),
                obs = as.character(obs)) |> 
  dplyr::slice(-1) |> 
  dplyr::mutate(mes_ano = "nov-2023") |> 
  dplyr::select(dia, peso, kcal, obs, mes_ano)

df_2023_dez <- df_2023_dez |> 
  dplyr::rename(dia = 1, kcal = `Kcal consumidas`, obs = 16,
                peso = Peso) |>
  dplyr::mutate(dia = dia+30) |> 
  dplyr::mutate(mes_ano = "dez-2023") |> 
  dplyr::select(dia, peso, kcal, obs, mes_ano)

df_2024_jan <- df_2024_jan |> 
  dplyr::rename(dia = 1, kcal = `Kcal consumidas`, obs = Obs,
                peso = Peso) |> 
  dplyr::filter(dia <= 15) |>
  dplyr::mutate(dia = dia+61) |> 
  dplyr::mutate(mes_ano = "jan-2024") |> 
  dplyr::select(dia, peso, kcal, obs, mes_ano)

df_2023_nov |> 
  dplyr::slice(1:10) |> 
  gt::gt()
```

E por fim farei a união em um único banco de dados, porque muitos dos tratamentos seguintes devem ser feitos em todas as bases e podem ser feitas de forma simultânea. Como estou utilizando um período de tempo, achei mais fácil de apenas lidar como se fossem períodos em dias, sem precisar trabalhar com mês e ano, portanto usei a contagem de dias numa sequência de tempo, mantive uma coluna com o mês e ano para, caso precise, tenha a tabela fonte daquele dado, ou caso ache interessante trabalhar com data de outra forma. Isto já vai nos revelar dados interessantes.

```{r, juntando-bases}
df_dieta <- dplyr::bind_rows(df_2023_nov, df_2023_dez, df_2024_jan) |> 
  tidyr::as_tibble()
```

#### Verificando tipos de variáveis

```{r, primeiras-obs}
col_classes <- sapply(df_dieta, class)
col_names <- colnames(df_dieta)

df_cols <- tibble(col_names, col_classes)
df_cols |> 
  gt::gt() |> 
  gt::cols_label(col_names = gt::md("**Coluna**"),
                 col_classes = gt::md("**Tipo**"))

```

Podemos ver o tipo de cada coluna, as colunas **dia**, **peso**, **obs** e **mes_ano** foram lidas corretamente, porém a coluna **kcal** deveria ter sido lida como um valor. Vamos investigar o problema desta coluna.

```{r, kcal-sample}
df_dieta |>
  dplyr::select(kcal) |> 
  dplyr::slice_sample(n = 10) |> 
  gt::gt()
```

#### Tratando variável calorias consumidas

Existe um problema de preenchimento desta coluna, existem valores que são apenas numéricos, valores do tipo *character*, valores nulos e NA. Portanto, irei trabalhar primeiro limpar os valores desta coluna, mantendo apenas os valores numéricos e criarei uma nova coluna que funcionará como legenda para casos de:

-   0: Calorias consumidas anotadas corretamente.
-   1: Dias com refeições livres, onde, ainda que tenha mantido um certo controle, por ter uma refeição que não foi calculada, preferi não contar calorias.
-   2: Dias onde por algum outro motivo não contei as calorias, seja por viagem, ou por algum outro motivo não indicado.
-   3: Período onde me dei uma "folga", de 24/12 até dia 01/01.
-   4: Dias que não foram contabilizados porque ainda não aconteceram (mês de janeiro)

```{r, tratamento-de-dados-2}
# df_dieta_ <- df_dieta
df_dieta <- df_dieta |> 
  dplyr::mutate(obs = if_else(is.na(obs), "NA", obs)) |> 
  dplyr::mutate(kcal_clean = as.numeric(stringr::str_extract(kcal,"[0-9.]+"))) |> 
  # dplyr::filter(kcal_clean >= 1500) |> 
  dplyr::mutate(kcal_label = case_when(
    stringr::str_detect(tolower(obs), "livre") ~ 1,
    (kcal == "NULL" & obs == "NA") ~ 2,
    (is.na(peso) & is.na(kcal) & obs == "NA" & (mes_ano == "dez-2023" | dia == 62)) ~ 3,
    (is.na(peso) & is.na(kcal) & obs == "NA") ~ 4,
    TRUE ~ 0
  )) |>  
  dplyr::select(dia, peso, kcal, kcal_clean, kcal_label, obs, mes_ano)
```

### Observações iniciais

Agora com dados já tratados podemos começar as análises. Vamos começar pelo mais simples, verificar valores que mais se repetem, valores mais altos e baixos de peso registrados, e para a variável de observação, fazer uma contagem de palavras que mais apareceram nas observações.

```{r, observacoes-iniciais}
peso_min = min(df_dieta$peso, na.rm = T)
peso_max = max(df_dieta$peso, na.rm = T)
## Tratamento para remover valores irreais, abaixo de 1500kcal
kcal_min = min(df_dieta[df_dieta$kcal_clean >= 1500,]$kcal_clean, na.rm = T)
# kcal_min = min(df_dieta$kcal_clean, na.rm = T)
kcal_max = max(df_dieta$kcal_clean, na.rm = T)
kcal_count_correct = sum(df_dieta$kcal_label == 0)
kcal_count_incorrect = sum(df_dieta$kcal_label %in% c(1, 2))
kcal_count_incorrect_vac = sum(df_dieta$kcal_label == 3)

# df_dieta[df_dieta$kcal_clean > 1600,]$kcal_clean

obs_table <- func_count_words(df_dieta$obs)
```

- Na ordem das variaveis analisadas, temos observações que a duração da dieta foi de `r max(df_dieta$dia)` dias, contando com o período de intervalo do dia 24/12/2023 ao dia 01/01/2024.

- O peso foi de `r peso_max` até `r peso_min`. 

- As kcal máximas consumidas foram de `r kcal_max` e as kcal mínimas foram de `r kcal_min`.

- Os dias que fiz a contagem de kcal diárias corretamente e me pesei foram: `r kcal_count_correct`, já os dias que não fiz a contagem de kcal corretamente (não anotei) e/ou não me pesei, foram `r kcal_count_incorrect`, e os dias que tirei um descanso no final do ano foram: `r kcal_count_incorrect_vac`. 


Olhando estes números parece que metade do tempo não fiz dieta, mas mesmo nos dias que não fiz a pesagem ou anotei corretamente os valores de calorias, foram dias que tentei seguir a dieta. E nas férias de final de ano, ainda que tenha comido mais nos dias de feriado, nos demais eu também tentei não exagerar na alimentação, uma prova disso é o peso que ao retornar à dieta no dia 03/01/2024 estava praticamente o mesmo de quando saí de "férias".

```{r, tabela-palavras}
obs_table |> 
  dplyr::slice_head(n = 10) |> 
  gt::gt() |> 
  gt::cols_label(string = gt::md("**Palavra**"),
                 count = gt::md("**Frequência**"))
```

Uma analise das observações não traz muitas conclusões interessantes, a única palavra que pode representar um pouco os dias  fora de dieta são as palavras "livre", palavra que costumo usar para simbolizar dias que não contei calorias e normalmente fiz uma refeição fora da dieta. As palavras "pouco" e "menos" também indicam alguns dias que eu acabei comendo abaixo do valor estipulado.


